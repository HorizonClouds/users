openapi: 3.0.0
info:
  title: Example API
  version: 1.0.0
  description: API documentation for Example microservice
servers:
  - url: http://localhost:3000/api/v1
paths:
  /examples:
    get:
      summary: Get all examples
      tags:
        - Example
      responses:
        '200':
          description: A list of examples
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    post:
      summary: Create a new example
      tags:
        - Example
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExample'
      responses:
        '201':
          description: The created example
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Example created successfully
                  data:
                    $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
  /examples/{id}:
    get:
      summary: Get a specific example by ID
      tags:
        - Example
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the example to get
          schema:
            type: string
      responses:
        '200':
          description: The requested example
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Example not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Example not found
                  appCode:
                    type: string
                    example: UNKNOWN_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    put:
      summary: Update an existing example by ID
      tags:
        - Example
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the example to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Example'
      responses:
        '200':
          description: The updated example
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Example updated successfully
                  data:
                    $ref: '#/components/schemas/Example'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Example not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Example not found
                  appCode:
                    type: string
                    example: UNKNOWN_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    delete:
      summary: Delete an example by ID
      tags:
        - Example
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the example to delete
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: Example not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Example not found
                  appCode:
                    type: string
                    example: UNKNOWN_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
  /users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Usuario
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    post:
      summary: Crear un nuevo usuario
      tags:
        - Usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Usuario creado con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Usuario creado correctamente
                  data:
                    $ref: '#/components/schemas/User'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'

  /users/{id}:
    get:
      summary: Obtener un usuario específico por ID
      tags:
        - Usuario
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario a obtener
          schema:
            type: string
      responses:
        '200':
          description: Usuario solicitado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    $ref: '#/components/schemas/User'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Usuario no encontrado
                  appCode:
                    type: string
                    example: UNKNOWN_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    put:
      summary: Actualizar un usuario existente por ID
      tags:
        - Usuario
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario a actualizar
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: El usuario actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Usuario actualizado correctamente
                  data:
                    $ref: '#/components/schemas/User'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Usuario no encontrado
                  appCode:
                    type: string
                    example: UNKNOWN_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
    delete:
      summary: Eliminar un usuario por ID
      tags:
        - Usuario
      parameters:
        - in: path
          name: id
          required: true
          description: ID del usuario a eliminar
          schema:
            type: string
      responses:
        '204':
          description: Usuario eliminado con éxito
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Usuario no encontrado
                  appCode:
                    type: string
                    example: UNKNOWN_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
  /loginHistory:
    get:
      summary: Obtener todo el historial de inicio de sesión
      tags:
        - LoginHistory
      responses:
        '200':
          description: Login History
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Success!
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoginHistory'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Error retrieving login history
                  appCode:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'

    post:
      summary: Registrar un intento de inicio de sesión
      tags:
        - LoginHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginHistoryRequest'
      responses:
        '201':
          description: Intento de inicio de sesión registrado con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Login attempt recorded successfully
                  appCode:
                    type: string
                    example: CREATED
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '400':
          description: Error en los datos de la solicitud
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid request data
                  appCode:
                    type: string
                    example: BAD_REQUEST
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Error recording login attempt
                  appCode:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'

  /login-history/{userId}:
    get:
      summary: Obtener el historial de inicio de sesión de un usuario específico
      tags:
        - LoginHistory
      parameters:
        - in: path
          name: userId
          required: true
          description: ID del usuario cuyo historial de inicio de sesión se desea obtener
          schema:
            type: string
      responses:
        '200':
          description: Historial de inicio de sesión del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Login history for user retrieved successfully
                  data:
                    $ref: '#/components/schemas/LoginHistoryList'
                  appCode:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: User not found
                  appCode:
                    type: string
                    example: NOT_FOUND
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Error retrieving login history for user
                  appCode:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  timestamp:
                    type: string
                    example: '2023-10-01T12:00:00.000Z'
  /password-recovery-request:
    post:
      summary: Solicitar la recuperación de contraseña
      tags:
        - Password Recovery
      operationId: createPasswordRecoveryRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Correo electrónico del usuario para el cual se solicita la recuperación
                  example: "user@example.com"
      responses:
        '201':
          description: Solicitud de recuperación de contraseña creada con éxito
        '400':
          description: Error de validación (por ejemplo, si el correo no está registrado)
        '404':
          description: No se encuentra el correo electrónico registrado
  /password-recovery-request/{recoveryToken}:
    put:
      summary: Validar y restablecer la contraseña utilizando un token de recuperación
      tags:
        - Password Recovery
      operationId: resetPassword
      parameters:
        - name: recoveryToken
          in: path
          required: true
          description: Token de recuperación para verificar la solicitud
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  description: Nueva contraseña para el usuario
                  example: "NewSecurePassword123!"
      responses:
        '200':
          description: Contraseña restablecida con éxito
        '400':
          description: Error de validación o contraseña no segura
        '404':
          description: Token de recuperación no válido o expirado

  /friend-request:
    post:
      summary: Crear una nueva solicitud de amistad
      tags:
        - Friend Request
      operationId: createFriendRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID del usuario que envía la solicitud
                  example: "user123"
                recipientUserId:
                  type: string
                  description: ID del usuario que recibirá la solicitud
                  example: "user456"
      responses:
        '201':
          description: Solicitud de amistad creada con éxito
        '400':
          description: Error de validación o solicitud pendiente existente
        '404':
          description: No se encuentra la solicitud pendiente
  /friend-request/accept/{requestId}:
    put:
      summary: Aceptar una solicitud de amistad
      tags:
        - Friend Request
      operationId: acceptFriendRequest
      parameters:
        - name: requestId
          in: path
          required: true
          description: ID de la solicitud de amistad
          schema:
            type: string
      responses:
        '200':
          description: Solicitud de amistad aceptada con éxito
        '404':
          description: Solicitud de amistad no encontrada
        '400':
          description: La solicitud ya ha sido aceptada o rechazada
  /friend-request/reject/{requestId}:
    put:
      summary: Rechazar una solicitud de amistad
      tags:
        - Friend Request
      operationId: rejectFriendRequest
      parameters:
        - name: requestId
          in: path
          required: true
          description: ID de la solicitud de amistad
          schema:
            type: string
      responses:
        '200':
          description: Solicitud de amistad rechazada con éxito
        '404':
          description: Solicitud de amistad no encontrada
        '400':
          description: La solicitud ya ha sido aceptada o rechazada
  /friend-requests/{userId}:
    get:
      summary: Obtener todas las solicitudes de amistad de un usuario
      tags:
        - Friend Request
      operationId: getFriendRequests
      parameters:
        - name: userId
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: Solicitudes de amistad obtenidas con éxito
        '404':
          description: No hay solicitudes de amistad para este usuario
  /friend-request/{requestId}:
    delete:
      summary: Eliminar una solicitud de amistad
      tags:
        - Friend Request
      operationId: deleteFriendRequest
      parameters:
        - name: requestId
          in: path
          required: true
          description: ID de la solicitud de amistad
          schema:
            type: string
      responses:
        '200':
          description: Solicitud de amistad eliminada con éxito
        '404':
          description: Solicitud de amistad no encontrada
  /follow:
    post:
      summary: Crear un nuevo seguimiento
      tags:
        - Following
      operationId: createFollowing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followerUserId:
                  type: string
                  description: ID del usuario que realiza el seguimiento
                  example: "user123"
                followedUserId:
                  type: string
                  description: ID del usuario al que se sigue
                  example: "user456"
      responses:
        '201':
          description: Seguimiento creado con éxito
        '400':
          description: Ya sigues a este usuario
        '404':
          description: No se pudo realizar el seguimiento
  /followers/{userId}:
    get:
      summary: Obtener todos los seguidores de un usuario
      tags:
        - Following
      operationId: getFollowers
      parameters:
        - name: userId
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: Seguidores obtenidos con éxito
        '404':
          description: No se encontraron seguidores para este usuario
  /followed/{userId}:
    get:
      summary: Obtener todos los usuarios seguidos por un usuario
      tags:
        - Following
      operationId: getFollowedUsers
      parameters:
        - name: userId
          in: path
          required: true
          description: ID del usuario
          schema:
            type: string
      responses:
        '200':
          description: Usuarios seguidos obtenidos con éxito
        '404':
          description: No se encontraron usuarios que sigas
  /unfollow/{followerUserId}/{followedUserId}:
    delete:
      summary: Eliminar un seguimiento
      tags:
        - Following
      operationId: deleteFollowing
      parameters:
        - name: followerUserId
          in: path
          required: true
          description: ID del usuario que quiere dejar de seguir
          schema:
            type: string
        - name: followedUserId
          in: path
          required: true
          description: ID del usuario que se deja de seguir
          schema:
            type: string
      responses:
        '200':
          description: Seguimiento eliminado con éxito
        '404':
          description: No se encontró el seguimiento
components:
  schemas:
    Example:
      type: object
      properties:
        _id:
          type: string
          example: '60c72b2f9b1d8f0d8d0b6f9e'
        name:
          type: string
          example: Example Name
        value:
          type: number
          example: 123
      required:
        - name
        - value
    NewExample:
      type: object
      properties:
        name:
          type: string
          example: Example Name
        value:
          type: number
          example: 123
      required:
        - name
        - value
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        photo:
          type: string
        biography:
          type: string
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewUser:
      type: object
      properties:
        name:
          type: string
        photo:
          type: string
        biography:
          type: string
        email:
          type: string
        password:
          type: string
    LoginHistory:
      type: object
      properties:
        userId:
          type: string
        timestamp:
          type: string
          format: date-time
        ipAddress:
          type: string
        success:
          type: boolean
        failureReason:
          type: string
      required:
        - userId
        - timestamp
        - success

    LoginHistoryRequest:
      type: object
      properties:
        userId:
          type: string
        ipAddress:
          type: string
        success:
          type: boolean
        failureReason:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - userId
        - ipAddress
        - success
        - timestamp

    LoginHistoryList:
      type: array
      items:
        $ref: '#/components/schemas/LoginHistory'

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
        appCode:
          type: string
        timestamp:
          type: string
      required:
        - status
        - message
        - appCode
        - timestamp
